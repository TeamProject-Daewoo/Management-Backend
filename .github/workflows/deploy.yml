name: Build and Push Frontend Image, then Dispatch

on:
  push:
    branches: [ "main" ] # main 브랜치에 코드가 push될 때 실행

jobs:
  build-and-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 1. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env.production file
        run: |
          echo "VITE_API_URL=" >> .env.production
          echo "VITE_BACK_ADMIN_URL=" >> .env.production
          echo "VITE_API_URL_ADMIN=" >> .env.production
          echo "VITE_HOMPAGE_MAIN=" >> .env.production
          echo "VITE_BUS_URL=" >> .env.production
          # 민감한 정보는 GitHub Secrets에서 가져오기
          echo "VITE_KAKAO_JAVASCRIPT_KEY=${{ secrets.VITE_KAKAO_JAVASCRIPT_KEY }}" >> .env.production
          echo "VITE_KAKAO_RESTAPI_KEY=${{ secrets.VITE_KAKAO_RESTAPI_KEY }}" >> .env.production
          echo "VITE_KAKAO_MAP_APPKEY=${{ secrets.VITE_KAKAO_MAP_APPKEY }}" >> .env.production

      # 3. Docker 이미지 빌드 및 ECR에 Push
      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: management-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 4. 백엔드 레포지토리에 배포 신호(dispatch) 보내기
      - name: Trigger deployment in backend repository
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository: TeamProject-Daewoo/Hotel_booking_backend
          event-type: deploy-trigger
